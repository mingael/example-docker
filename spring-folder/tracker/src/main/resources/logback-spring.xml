<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <springProfile name="dev">
        <property resource="application-dev.yml"/>
    </springProfile>
    <springProfile name="prod">
        <property resource="application-prod.yml"/>
    </springProfile>

    <springProperty name="LOG_DIR_PATH" source="log.config.path"/>
    <springProperty name="LOG_FILE_NAME" source="log.config.filename"/>
    <springProperty name="LOG_MAX_HISTORY" source="log.config.max-history"/>
    <springProperty name="LOG_TOTAL_SIZE_CAP" source="log.config.total-size-cap"/>

    <property name="CONSOLE_LOG_PATTERN"
              value="[%d{yyyy-MM-dd HH:mm:ss}:%-3relative] %highlight(%-5level) %magenta(${PID:-}) --- [%15.15thread] %cyan(%-40.40logger{36}) : %msg%n"/>
    <property name="FILE_LOG_PATTERN"
              value="[%d{yyyy-MM-dd HH:mm:ss.SSS,Asia/Tokyo}:%-3relative] %-5level ${PID:-} --- [%15.15thread] %-40.40logger{36} : %msg%n"/>
    <property name="FILE_LOG_PATTERN_CLASS_NUMBER"
              value="[%d{yyyy-MM-dd HH:mm:ss.SSS,Asia/Tokyo}:%-3relative] %-5level ${PID:-} --- [%15.15thread] %logger{36} [%file:%line] - %msg ##%n"/>

    <!-- 콘솔(STDOUT)에 로그 기록 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 파일(FILE)에 로그 기록 -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- Application 동작 중에 쌓이는 로그 -->
        <file>${LOG_DIR_PATH}/${LOG_FILE_NAME}.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${FILE_LOG_PATTERN_CLASS_NUMBER}</pattern>
        </encoder>
        <!-- 로그 파일 보관 규칙 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 보관되는(rolled-over, archived) 로그 파일명 지정 -->
            <fileNamePattern>${LOG_DIR_PATH}/%d{yyyy-MM,aux}/${LOG_FILE_NAME}.%d.log</fileNamePattern>
            <!-- 최대 보관 개월수. 오래된 파일 순으로 삭제 -->
            <maxHistory>${LOG_MAX_HISTORY}</maxHistory>
            <!-- 총 보관 크기 제한. 기본 byte 단위 -->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
        </rollingPolicy>
    </appender>

    <!-- 비동기 파일(FILE) -->
    <appender name="FILE-ASYNC" class="ch.qos.logback.classic.AsyncAppender">
        <appender-ref ref="FILE"/>
        <!-- 이벤트와 연관된 코드 정보(클래스:줄번호)를 기록할지 여부. 사용할 경우 성능 저하가 발생한다.-->
        <includeCallerData>false</includeCallerData>
        <!-- 큐 용량이 설정값% 남으면 ERROR, Warn 외 로그는 삭제. 0으로 설정하면 모든 로그를 유지 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 큐 크기 -->
        <queueSize>1024</queueSize>
        <!-- 기본 false. 큐에 남는 공간이 없으면 스레드가 블락킹(blocking) 상태가 되어 공간이 비길 기다린다. true 면 블락킹 상태에 빠지지 않는 대신 로그를 버린다 -->
        <neverBlock>true</neverBlock>
    </appender>

    <springProfile name="dev">
        <root level="DEBUG">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="FILE-ASYNC"/>
        </root>
<!--        <logger name="TrackerController" level="TRACE" additivity="false">-->
<!--            <appender-ref ref="FILE-ASYNC"/>-->
<!--        </logger>-->
    </springProfile>

    <springProfile name="prod">
        <root level="INFO">
            <appender-ref ref="STDOUT"/>
        </root>
        <logger name="my_logger" level="DEBUG">
            <appender-ref ref="FILE"/>
        </logger>
    </springProfile>
</configuration>